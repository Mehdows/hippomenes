$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module TOP $end
  $scope module tb_register_file $end
   $var wire 32 K DataWidth [31:0] $end
   $var wire 32 K NumRegs [31:0] $end
   $var wire 32 L IndexWidth [31:0] $end
   $var wire 1 # clk $end
   $var wire 1 $ writeEn $end
   $var wire 5 % writeAddr [4:0] $end
   $var wire 32 & writeData [31:0] $end
   $var wire 5 ' readAddr1 [4:0] $end
   $var wire 5 ( readAddr2 [4:0] $end
   $var wire 32 I readData1 [31:0] $end
   $var wire 32 J readData2 [31:0] $end
   $scope module dut $end
    $var wire 32 K DataWidth [31:0] $end
    $var wire 32 K NumRegs [31:0] $end
    $var wire 32 L IndexWidth [31:0] $end
    $var wire 1 # clk $end
    $var wire 1 $ writeEn $end
    $var wire 5 % writeAddr [4:0] $end
    $var wire 32 & writeData [31:0] $end
    $var wire 5 ' readAddr1 [4:0] $end
    $var wire 5 ( readAddr2 [4:0] $end
    $var wire 32 I readData1 [31:0] $end
    $var wire 32 J readData2 [31:0] $end
    $var wire 32 ) regs[0] [31:0] $end
    $var wire 32 * regs[1] [31:0] $end
    $var wire 32 + regs[2] [31:0] $end
    $var wire 32 , regs[3] [31:0] $end
    $var wire 32 - regs[4] [31:0] $end
    $var wire 32 . regs[5] [31:0] $end
    $var wire 32 / regs[6] [31:0] $end
    $var wire 32 0 regs[7] [31:0] $end
    $var wire 32 1 regs[8] [31:0] $end
    $var wire 32 2 regs[9] [31:0] $end
    $var wire 32 3 regs[10] [31:0] $end
    $var wire 32 4 regs[11] [31:0] $end
    $var wire 32 5 regs[12] [31:0] $end
    $var wire 32 6 regs[13] [31:0] $end
    $var wire 32 7 regs[14] [31:0] $end
    $var wire 32 8 regs[15] [31:0] $end
    $var wire 32 9 regs[16] [31:0] $end
    $var wire 32 : regs[17] [31:0] $end
    $var wire 32 ; regs[18] [31:0] $end
    $var wire 32 < regs[19] [31:0] $end
    $var wire 32 = regs[20] [31:0] $end
    $var wire 32 > regs[21] [31:0] $end
    $var wire 32 ? regs[22] [31:0] $end
    $var wire 32 @ regs[23] [31:0] $end
    $var wire 32 A regs[24] [31:0] $end
    $var wire 32 B regs[25] [31:0] $end
    $var wire 32 C regs[26] [31:0] $end
    $var wire 32 D regs[27] [31:0] $end
    $var wire 32 E regs[28] [31:0] $end
    $var wire 32 F regs[29] [31:0] $end
    $var wire 32 G regs[30] [31:0] $end
    $var wire 32 H regs[31] [31:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
0#
1$
b00001 %
b00010010001101000101011001111000 &
b00000 '
b00000 (
b00000000000000000000000000000000 )
b00000000000000000000000000000000 *
b00000000000000000000000000000000 +
b00000000000000000000000000000000 ,
b00000000000000000000000000000000 -
b00000000000000000000000000000000 .
b00000000000000000000000000000000 /
b00000000000000000000000000000000 0
b00000000000000000000000000000000 1
b00000000000000000000000000000000 2
b00000000000000000000000000000000 3
b00000000000000000000000000000000 4
b00000000000000000000000000000000 5
b00000000000000000000000000000000 6
b00000000000000000000000000000000 7
b00000000000000000000000000000000 8
b00000000000000000000000000000000 9
b00000000000000000000000000000000 :
b00000000000000000000000000000000 ;
b00000000000000000000000000000000 <
b00000000000000000000000000000000 =
b00000000000000000000000000000000 >
b00000000000000000000000000000000 ?
b00000000000000000000000000000000 @
b00000000000000000000000000000000 A
b00000000000000000000000000000000 B
b00000000000000000000000000000000 C
b00000000000000000000000000000000 D
b00000000000000000000000000000000 E
b00000000000000000000000000000000 F
b00000000000000000000000000000000 G
b00000000000000000000000000000000 H
b00000000000000000000000000000000 I
b00000000000000000000000000000000 J
b00000000000000000000000000100000 K
b00000000000000000000000000000101 L
#10
1#
b00010010001101000101011001111000 *
#20
0#
#30
